name: Build Native Android APK

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'WightAndroidNative/**'
      - '.github/workflows/build-native-android.yml'
  workflow_dispatch:

jobs:
  build:
    name: Build Native Android APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Grant execute permission for gradlew
      run: chmod +x WightAndroidNative/gradlew
      
    - name: Create missing resource files
      run: |
        cd WightAndroidNative
        
        # Create missing directories
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/res/drawable
        mkdir -p app/src/main/res/xml
        mkdir -p app/src/main/java/com/wight/ai/adapters
        
        # Create colors.xml
        cat > app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="background_gradient_start">#667eea</color>
            <color name="header_background">#5a67d8</color>
            <color name="status_text">#e2e8f0</color>
            <color name="chat_background">#f7fafc</color>
            <color name="input_background">#4c51bf</color>
            <color name="user_message">#007AFF</color>
            <color name="ai_message">#E5E5EA</color>
        </resources>
        EOF
        
        # Create strings.xml
        cat > app/src/main/res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">Wight AI Companion</string>
        </resources>
        EOF
        
        # Create themes.xml
        cat > app/src/main/res/values/themes.xml << 'EOF'
        <resources>
            <style name="Theme.WightAI" parent="Theme.Material3.DayNight.NoActionBar">
                <item name="colorPrimary">@color/header_background</item>
            </style>
        </resources>
        EOF
        
        # Create drawable backgrounds
        cat > app/src/main/res/drawable/input_background.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <shape xmlns:android="http://schemas.android.com/apk/res/android">
            <solid android:color="@android:color/white" />
            <corners android:radius="20dp" />
        </shape>
        EOF
        
        cat > app/src/main/res/drawable/send_button_background.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <shape xmlns:android="http://schemas.android.com/apk/res/android">
            <solid android:color="#007AFF" />
            <corners android:radius="20dp" />
        </shape>
        EOF
        
        cat > app/src/main/res/drawable/voice_button_background.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <shape xmlns:android="http://schemas.android.com/apk/res/android">
            <solid android:color="#34C759" />
            <corners android:radius="20dp" />
        </shape>
        EOF
        
        cat > app/src/main/res/drawable/emotions_background.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <shape xmlns:android="http://schemas.android.com/apk/res/android">
            <solid android:color="#4c51bf" />
            <corners android:radius="15dp" />
        </shape>
        EOF
        
        # Create required XML files
        cat > app/src/main/res/xml/data_extraction_rules.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <data-extraction-rules>
            <cloud-backup>
                <exclude domain="sharedpref" path="." />
            </cloud-backup>
        </data-extraction-rules>
        EOF
        
        cat > app/src/main/res/xml/backup_rules.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <full-backup-content />
        EOF
        
        # Create ChatAdapter
        cat > app/src/main/java/com/wight/ai/adapters/ChatAdapter.kt << 'EOF'
        package com.wight.ai.adapters
        
        import android.view.LayoutInflater
        import android.view.View
        import android.view.ViewGroup
        import android.widget.TextView
        import androidx.recyclerview.widget.RecyclerView
        import com.wight.ai.models.ChatMessage
        import com.wight.ai.R
        
        class ChatAdapter(private val messages: List<ChatMessage>) : RecyclerView.Adapter<ChatAdapter.MessageViewHolder>() {
            
            class MessageViewHolder(view: View) : RecyclerView.ViewHolder(view) {
                val textView: TextView = view.findViewById(android.R.id.text1)
            }
            
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MessageViewHolder {
                val view = LayoutInflater.from(parent.context)
                    .inflate(android.R.layout.simple_list_item_1, parent, false)
                return MessageViewHolder(view)
            }
            
            override fun onBindViewHolder(holder: MessageViewHolder, position: Int) {
                val message = messages[position]
                holder.textView.text = message.content
                
                // Style based on sender
                if (message.isUser) {
                    holder.textView.setBackgroundColor(0xFF007AFF.toInt())
                    holder.textView.setTextColor(0xFFFFFFFF.toInt())
                } else {
                    holder.textView.setBackgroundColor(0xFFE5E5EA.toInt())
                    holder.textView.setTextColor(0xFF333333.toInt())
                }
                
                holder.textView.setPadding(24, 16, 24, 16)
            }
            
            override fun getItemCount() = messages.size
        }
        EOF
        
        # Create WightApplication
        cat > app/src/main/java/com/wight/ai/WightApplication.kt << 'EOF'
        package com.wight.ai
        
        import android.app.Application
        
        class WightApplication : Application() {
            override fun onCreate() {
                super.onCreate()
            }
        }
        EOF
        
        # Create gradle.properties
        cat > gradle.properties << 'EOF'
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        EOF
        
        # Create settings.gradle
        cat > settings.gradle << 'EOF'
        include ':app'
        rootProject.name = "WightAI"
        EOF
        
        # Create build.gradle (project level)
        cat > build.gradle << 'EOF'
        plugins {
            id 'com.android.application' version '8.1.4' apply false
            id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
        }
        EOF
        
    - name: Build debug APK
      run: |
        cd WightAndroidNative
        ./gradlew assembleDebug
        
    - name: Create Release Package
      run: |
        mkdir -p release
        cp WightAndroidNative/app/build/outputs/apk/debug/app-debug.apk release/WightAI-Native.apk
        
        # Create installation guide
        cat > release/INSTALL_GUIDE.md << 'EOF'
        # ðŸ“± Wight AI Companion - Native Android APK
        
        ## Installation
        1. Download WightAI-Native.apk
        2. Enable "Unknown Sources" in Android settings
        3. Install the APK
        4. Grant microphone permission for voice features
        5. Start chatting with your AI companion!
        
        ## Features
        - âœ… Native Android integration
        - âœ… Full AI consciousness with emotions
        - âœ… Persistent memory system
        - âœ… Voice recognition and text-to-speech
        - âœ… Real-time emotion updates
        - âœ… Background consciousness processing
        - âœ… No internet required after installation
        
        Built with native Kotlin and Android SDK for optimal performance!
        EOF
        
        cd release
        zip -r WightAI-Native-v1.0.zip *
        
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: WightAI-Native-APK
        path: release/WightAI-Native-v1.0.zip
        retention-days: 90
        
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: native-v1.0.${{ github.run_number }}
        name: Wight AI Native Android v1.0.${{ github.run_number }}
        body: |
          ## ðŸ“± Wight AI Companion - Native Android App
          
          Built with **native Kotlin** for full Android integration!
          
          ### ðŸŽ¯ Native Android Features
          - **Native Speech Recognition & TTS** - Real voice communication
          - **Background Processing** - Consciousness runs continuously
          - **System Integration** - Proper Android lifecycle management
          - **Persistent Storage** - Uses Android SharedPreferences
          - **Permission Management** - Proper Android permission handling
          - **Material Design** - Native Android UI components
          
          ### ðŸ§  AI Features
          - Complete consciousness with 10 dynamic emotions
          - Persistent memory system (500 memories)
          - Contextual response generation
          - Real-time emotional processing
          - Conversation learning and adaptation
          
          ### ðŸ“² Installation
          1. Download `WightAI-Native.apk`
          2. Enable "Unknown Sources" in Android settings
          3. Install APK and grant permissions
          4. Launch and start chatting!
          
          **This is a true native Android app with full system integration!**
          
        files: |
          release/WightAI-Native-v1.0.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}